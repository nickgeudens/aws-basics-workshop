service: aws-workshop

plugins:
  - serverless-iam-roles-per-function
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-1
  profile: ordina

custom:
  prefix: nick-aws-workshop
  s3Sync:
    - bucketNameKey: FrontendBucket
      localDir: frontend/build/
      params:
        - "@(index.html|ngsw.json)":
            CacheControl: 'no-cache'
        - "**/*.@(js|css|png)":
            CacheControl: 'public, max-age=5184000, immutable'
        - "**/*.@(woff|woff2|eot|ttf)":
            CacheControl: 'public, max-age=31536000, immutable'

functions:
  GetJokes:
    name: ${self:custom.prefix}-get-jokes
    handler: lambda/get-jokes-lambda.handler
    events:
      - http:
          path: /jokes/get
          method: get
          cors: true 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: 
          - !GetAtt JokesTable.Arn
          - !Sub "${JokesTable.Arn}/*"
    environment:
      TABLE_NAME: ${self:custom.prefix}-jokes-table
  VoteJokes:
    name: ${self:custom.prefix}-vote-jokes
    handler: lambda/vote-jokes-lambda.handler
    events:
      - http:
          path: /jokes/vote
          method: post
          cors: true 
    environment:
      TABLE_NAME: ${self:custom.prefix}-jokes-table

resources:
  Resources:
    JokesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.prefix}-jokes-table
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.prefix}-jokes-frontend
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html

    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: FrontendBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                - !GetAtt FrontendBucket.Arn
                - !Sub "${FrontendBucket.Arn}/*"

    FrontendCloudFrontDistribution:
      DependsOn:
        - FrontendBucket
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 0
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
            TargetOriginId: Frontend
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Origins:
            - DomainName: !GetAtt FrontendBucket.RegionalDomainName
              Id: Frontend
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
  Outputs:
    FrontendBucket:
      Description: S3 Bucket that holds the frontend code
      Value:
        Ref: FrontendBucket